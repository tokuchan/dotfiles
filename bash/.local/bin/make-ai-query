#!/bin/bash
# Formulate a query for the AI, regarding a file and build message.

set -euo pipefail
IFS=$'\n\t'

#------------------------------------------------------------------------------
# 0) create a temporary file and ensure it's removed on exit
#------------------------------------------------------------------------------
tmpfile=$(mktemp) || { echo "Failed to create temp file" >&2; exit 1; }
trap 'rm -f "$tmpfile"' EXIT

#------------------------------------------------------------------------------
# usage: print help and exit
#------------------------------------------------------------------------------
usage() {
  cat <<EOF >&2
Usage: $0 [-h] <filename> [string] <command>
  -h         Show this help message
  <filename> Path to the file to process
  [string]   A single-word/string; if omitted, read from stdin
  <command>  Command to run, supplied as one quoted string
EOF
  exit 1
}

#------------------------------------------------------------------------------
# 1) parse options
#------------------------------------------------------------------------------
while getopts ":h" opt; do
  case $opt in
    h) usage ;;
    \?) echo "Invalid option: -$OPTARG" >&2; usage ;;
  esac
done
shift $((OPTIND -1))

#------------------------------------------------------------------------------
# 2) filename (required)
#------------------------------------------------------------------------------
if [ $# -lt 1 ]; then
  echo "Error: missing filename" >&2
  usage
fi
filename=$1
shift

#------------------------------------------------------------------------------
# 3) string (optional; else read from stdin)
#------------------------------------------------------------------------------
if [ $# -gt 0 ] && [ "$1" != "--" ]; then
  input_string=$1
  shift
else
  # read entire stdin into a variable
  input_string=$(cat)
fi

#------------------------------------------------------------------------------
# 4) command to run (required)
#------------------------------------------------------------------------------
if [ $# -lt 1 ]; then
  echo "Error: missing command to run" >&2
  usage
fi
cmd_to_run=$1
shift

# now: $filename, $input_string and $cmd_to_run are set

# temporarily disable “exit on error”
set +e

# run the command, capturing both stdout and stderr
cmd_result=$( eval "$cmd_to_run" 2>&1 )
cmd_status=$?

# re-enable “exit on error”
set -e

# now:
#   $cmd_result holds all output (stdout+stderr)
#   $cmd_status holds the exit code of the command

cat <<EOF >"$tmpfile"
Here's my file \`$filename\`:
\`\`\`
$(<"$filename")
\`\`\`

Here's the output of command \`$cmd_to_run\`:
\`\`\`
$cmd_result
\`\`\`

$input_string
EOF

cat $tmpfile | xclip -selection clipboard
