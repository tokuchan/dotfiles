#!/bin/bash
##!/usr/bin/env nix-shell
##! nix-shell -p bash podman
##! nix-shell -i bash
declare -a stack;

function push () {
  stack=($@ ${stack[@]})
}

function pop () {
  if [ ${#stack[@]} -eq 0 ]
  then
    unset stack[@]
  else
    unset stack[0]
  fi
  stack=("${stack[@]}")
}

declare -A options

options[image]=gcc13
options[root]=on
options[cpus]=4
options[as]=6144000000
options[path]="build-debug/bin"

for arg in $*
do
  case ${arg} in
    on)
      options[${stack}]=on; pop
    ;;
    off)
      unset options[${stack}]; pop
    ;;
    set)
      value=${stack}; pop
      key=${stack}; pop
      options[${key}]=${value};
    ;;
    --help)
      options[help]=on
      pop
    ;;
    --)
      shift
      break 2
    ;;
    *)
      push ${arg}
  esac
  shift
done

echo $*

declare -a args
for arg in ${stack[@]}
do
  args=(${arg} ${args[@]})
done
args=(${args[@]} $@)

cwd=''
if [ "${options[root]}" = "on" ]
then
  cwd=$(git rev-parse --show-toplevel)
else
  cwd=$(pwd)
fi

cmd="podman run \
	--userns keep-id \
	--init \
	--ulimit core=-1 \
	--cpus=${options[cpus]} \
	--cap-add=SYS_PTRACE \
	--security-opt seccomp=unconfined \
	-ti \
	--mount type=bind,source=/tmp/,target=/tmp/ \
	-v $(readlink -f $HOME):$(readlink -f $HOME) \
	-v $(pwd):$(pwd) \
	--workdir ${cwd} \
	--env PATH="${cwd}/${options[path]}:${PATH}" \
	'${options[image]}' \
	-c '${args[@]}'"

if [ "${options[report]}" = "on" ]
then
  echo options-key: ... "${!options[@]}"
  echo options-val: ... "${options[@]}"
  echo pwd: ........... $(pwd)
  echo cwd: ........... ${cwd}
  echo cmd: ........... ${cmd}
fi

if [ "${options[help]}" = "on" ]
then
	cat <<EOF
Usage: bp--run [options] command

Options:
  Options are specified using a forth-style syntax. To set a flag named "foo",
  use "foo on". To clear foo, use "foo off". To set foo to bar, use "foo bar
  set".

  The following flags are recognized:

  root ...... (default: on)  Run the command in the project root.
  dry-run ... (default: off) Do not run the command, just print it.
  help ...... (default: off) Show this help and exit without doing anything.

  The following fields are recognized:

  image (default: gcc13) Specify the build image to run the command within.
  cpus  (default: 6)     Specify the number of CPUs to expose to the container.
  as    (default: 6144000000)  Specify the address space size, to limit RAM usage.
  path  (defautl: build-debug/bin) Specify the path to image-internal executables. Prepends the CWD automatically.
EOF

echo
echo Available Images
echo
docker images --format=json | jq -r '.[].Names | select( . != null )[]'

	exit
fi

if [ "${options[dry-run]}" = "on" ]
then
  echo "${cmd}"
else
  eval ${cmd}
fi
