#!/usr/bin/env python3
# vim: set syntax=python

import click
import sh
import re
import socket
import sys
import tempfile
import logging

from rich import print
from pathlib import Path
from textwrap import dedent

log = logging.getLogger(__name__)


def getLocalLogger():
    """Return a logger named for the calling function"""
    global log
    return log.getChild(sys._getframe().f_back.f_code.co_name)


def __probe() -> bool:
    """Try to open a connection to the specifed server and port, and return whether successful."""
    log = getLocalLogger()
    ctx = click.get_current_context()
    host = ctx.obj["host"]
    port = ctx.obj["port"]

    log.info(f"Probing server. {host=!s}, {port=!s}.")
    try:
        nc = sh.nc.bake("-z", "-w1", host, port)
        log.debug(f"Trying {nc=!s}.")
        nc()
        return True
    except sh.CommandNotFound:
        try:
            telnet = sh.telnet.bake("-e", "X", host, port, _in=sh.echo("X"))
            log.debug(f"Trying {telnet}.")
            return True
        except sh.ErrorReturnCode:
            return False
    except sh.ErrorReturnCode:
        return False


def __getHostIP() -> str:
    """Return the host's private IP."""
    log = getLocalLogger()
    log.info("Get this host's ip.")
    s = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    s.settimeout(0)
    try:
        # doesn't even have to be reachable
        s.connect(("10.254.254.254", 1))
        IP = s.getsockname()[0]
    except Exception:
        IP = "127.0.0.1"
    finally:
        s.close()
    log.debug(f"{IP=}")
    return IP


def __getAsgardIP() -> [str]:
    """Return the value output of part of ipconfig for the asgard-windows host."""
    log = getLocalLogger()
    log.info(f"Get Asgard host IP.")
    data = [
        (x.strip().split(" : "))
        for x in sh.awk(
            "/Wireless LAN adapter Wi-Fi:/,/^Ethernet adapter/{print}",
            _in=sh.ssh("asgard-windows", "ipconfig.exe"),
        ).split("\n")
    ][4:6]
    IP = list(list(zip(*data))[1])
    log.debug(f"{IP=}")
    return IP


def __getAsgardIPCIDR() -> str:
    """Return the IP in CIDR form for the asgard-windows host."""
    ipAndMask = __getAsgardIP()
    netmask = sum(bin(int(x)).count("1") for x in ipAndMask[1].split("."))
    return f"{ipAndMask[0]}/{netmask}"


def __scan(address_range: str, port: int) -> [str]:
    """Scan a range of IP addresses for any servers with the specified port open."""
    return [
        x
        for x in sh.nmap(
            "--send-eth",
            "-oG",
            "-",
            "--min-rate=10000",
            f"-p{port}",
            "-T5",
            address_range,
        ).split("\n")
    ]


@click.group()
@click.option("--user", "-u", help="Specify an optional username.")
@click.option(
    "--host",
    "-h",
    default=None,
    help="Specify the host to copy the key to. [Default: the first IP returned by scan-asgard.]",
)
@click.option(
    "--port",
    "-p",
    type=int,
    default=22,
    help="Specify the port number to connect to. [Default: 22.]",
)
@click.option(
    "--dry-run/--no-dry-run",
    "-d/-D",
    help="Don't actually write anything, just log what I would have done.",
)
@click.option("--verbose", "-v", count=True, help="Increase logging verbosity.")
@click.option("--quiet", "-q", count=True, help="Decrease logging verbosity.")
@click.pass_context
def cli(
    ctx,
    user: str | None,
    host: str | None,
    port: int | None,
    dry_run: bool,
    verbose: int,
    quiet: int,
):
    logLevel = logging.WARN + (10 * quiet - 10 * verbose)
    logging.basicConfig(
        format="%(asctime)s %(filename)s %(funcName)s %(levelname)s %(message)s",
        level=logLevel,
    )
    if quiet != 0 or verbose != 0:
        print(
            "# version 1.0\n# fields x-date x-time x-filename x-function-name x-level x-message",
            file=sys.stderr,
        )
    ctx.ensure_object(dict)
    ctx.obj["port"] = port if port != None else 22
    ctx.obj["dry_run"] = dry_run

    try:
        if host == None:
            host = __scanAsgard()[0]
    except IndexError:
        print("Error: Unable to discover new host. Is it plugged in?")
        exit(1)

    ctx.obj["user"] = user
    ctx.obj["host"] = host if host != None else "127.0.0.1"
    ctx.obj["userHost"] = host if user == None else f"{user}@{host}"
    pass


@cli.command()
def probe():
    """Determine if the specified port is open on the specified server."""
    log = getLocalLogger()
    status = __probe()
    print(f"Server is reachable: {status}")
    exit(0 if status else 1)


@cli.command()
@click.option(
    "--ip-range",
    "-i",
    default=__getHostIP() + "/16",
    help="Specify the IP range to search. [Default= host's IP with 16-bit mask.]",
)
@click.pass_context
def scan(ctx, ip_range: str):
    """Scan the given IP range for instances of the open port given."""
    log = getLocalLogger()
    log.info(f"Scanning: {ip_range} for open port {ctx.obj['port']}.")
    log.info(f"Host IP: {__getHostIP()}.")
    print("\n".join(__scan(ip_range, ctx.obj["port"])))


def __scanAsgard() -> list:
    ctx = click.get_current_context()
    target = __getAsgardIPCIDR()
    pattern = re.compile(f"""{ctx.obj['port']}/open/tcp""")
    host = str(__getHostIP())
    asgard = str(__getAsgardIP()[0])
    filterIps = {host, asgard}

    def repl(m):
        return str(m.group(1))

    ips = set(
        (
            re.sub(r"""Host:\s+(\S+)\s+.*""", repl, x)
            for x in __scan(target, ctx.obj["port"])
            if pattern.search(x)
        )
    )
    ips -= filterIps

    return sorted(list(ips))


@cli.command()
def scan_asgard():
    """Run scan using the CIDR IP gleaned from SSH host asgard-windows.

    Filter out host and Asgard IP results.
    """
    print("\n".join(__scanAsgard()))


@cli.command()
def asgard_IP_CIDR():
    """Return the CIDR-form IP address for the SSH host asgard-windows."""
    print(__getAsgardIPCIDR())


def __install_ssh_key(password: str) -> None:
    log = getLocalLogger()
    log.info("Install SSH key on target.")
    aggregated = ""
    ctx = click.get_current_context()

    def ssh_interact(char, stdin):
        nonlocal aggregated
        aggregated += char
        if aggregated.endswith(
            "Are you sure you want to continue connecting (yes/no/[fingerprint])?"
        ):
            stdin.put("yes\n")
        elif aggregated.endswith("password:"):
            stdin.put(f"{password}\n")

    copyId = sh.ssh_copy_id.bake(
        "-p",
        ctx.obj["port"],
        ctx.obj["userHost"],
        _out=ssh_interact,
        _out_bufsize=0,
        _tty_in=True,
        _unify_ttys=True,
    )

    cleanKey = sh.ssh_keygen.bake(
        "-f", (Path.home() / ".ssh" / "known_hosts").resolve(), "-R", ctx.obj["host"]
    )

    log.debug(f"{copyId}")
    log.debug(f"{cleanKey}")

    log.info(f"Installing key on {ctx.obj['userHost']}:{ctx.obj['port']}")
    if not ctx.obj["dry_run"]:
        try:
            copyId()
            log.debug(f"{aggregated=}")
        except sh.ErrorReturnCode_1:
            log.warning(
                f"Removing any existing host keys for {ctx.obj['host']} and trying again."
            )
            log.debug(f"{cleanKey=!s}")
            cleanKey()
            log.debug(f"{copyId=!s}")
            copyId()
            log.debug(f"{aggregated=}")


@cli.command()
@click.option("--password", prompt=True, hide_input=True)
def install_ssh_key(password: str) -> None:
    """Install the SSH public key on the host."""
    __install_ssh_key(password)


def __update_helix_ssh_config() -> None:
    log = getLocalLogger()
    log.info("Update Helix SSH config.")
    sshConfDir = (Path.home() / ".ssh" / "config.d").resolve()
    ctx = click.get_current_context()
    if not ctx.obj["dry_run"]:
        with (sshConfDir / "01-helix-local").open("w") as fout:
            print(
                dedent(
                    f"""
                # Local Helix controlboard
                Host kelvin-local
                  Hostname {ctx.obj['host']}
                  User helix
                  IdentityFile ~/.ssh/id_ed25519
                  ProxyCommand ssh -W %h:%p tokuc@$(ip route show | grep -i default | awk '{{print $3}}')
                  ForwardAgent yes
                
            """
                ),
                file=fout,
            )


def __rebuild_ssh_config() -> None:
    """Build the ~/.ssh/config file from ~/.ssh/config.in and the files in ~/.ssh/config.d."""
    log = getLocalLogger()
    log.info("Rebuild SSH configuration.")
    sshDir = (Path.home() / ".ssh").resolve()
    ctx = click.get_current_context()
    if not ctx.obj["dry_run"]:
        with tempfile.NamedTemporaryFile(delete=False) as tmp:
            tmpPath = Path(tmp.name)
            with (sshDir / "config.in").open() as configIn:
                for line in configIn:
                    tmp.write(line.encode())
            for configPath in (sshDir / "config.d").iterdir():
                with configPath.open() as configIn:
                    for line in configIn:
                        tmp.write(line.encode())
            (sshDir / "config").replace(sshDir / "config~")
            tmpPath.replace(sshDir / "config")


def __update_shell() -> None:
    """Write a simple .bashrc file to the target."""
    log = getLocalLogger()
    log.info("Update .bashrc on target.")
    ctx = click.get_current_context()

    bashrc = dedent(
        rf"""
        export MINER_IP={ctx.obj['host']}
        function testAPI() {{
            echo echo '{{"command": "asc", "parameter": "0"}}' \| nc $MINER_IP 4028 \| jq
            echo '{{"command": "asc", "parameter": "0"}}' | nc $MINER_IP 4028 | jq
        }}
        
        export PS1='(controlboard) \h:\w\$ '
        umask 022
        
        # You may uncomment the following lines if you want `ls' to be colorized:
        export LS_OPTIONS='--color=auto'
        eval `dircolors`
        alias ls='ls $LS_OPTIONS'
        alias ll='ls $LS_OPTIONS -lsa'
        # alias l='ls $LS_OPTIONS -lA'
        #
        # Some more alias to avoid making mistakes:
        # alias rm='rm -i'
        # alias cp='cp -i'
        # alias mv='mv -i'
    
    """
    )

    with tempfile.NamedTemporaryFile(delete=False) as tmp:
        tmpPath = Path(tmp.name)
        tmp.write(bashrc.encode())

    scp = sh.scp.bake(
        tmpPath, f'scp://{ctx.obj["userHost"]}:{ctx.obj["port"]}/~/.bashrc'
    )

    log.debug(f"{scp=!s}")
    if not ctx.obj["dry_run"]:
        scp()


@cli.command()
@click.option("--password", "-P", prompt=True, hide_input=True)
@click.pass_context
def reskel(ctx, password: str) -> None:
    """Detect the new board, reconfigure ssh/config, then install the key on the board."""
    log = getLocalLogger()
    log.info("Reskel target.")
    __update_helix_ssh_config()
    __rebuild_ssh_config()
    __install_ssh_key(password)
    __update_shell()


@cli.command()
@click.argument("host")
def scan_ports(host: str) -> None:
    """Run nmap to scan for open ports on the given host."""
    print(sh.nmap("-v", "-T5", "-oG", "-", host))


if __name__ == "__main__":
    cli()
