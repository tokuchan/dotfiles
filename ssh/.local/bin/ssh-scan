#!/bin/bash
# Scan for SSH servers within a given IPv4 range.

# true if we have the given command(s)
we_have() { type "$@" >/dev/null 2>&1; }

# Usage: probe SERVER PORT|SERVICE
# returns true when SERVER has PORT opened (and responds within one second)
if we_have nc
  then probe() { nc -zw1 "$@" >/dev/null 2>&1; }
  else probe() { echo X |telnet -e X "$@" >/dev/null 2>&1; }
fi

# Usage: poke SERVER [PORT|SERVICE]
# As probe.  Also: PORT defaults to 80 (http) and reports the result
poke() {
  local RETVAL STATUS
  probe "$1" "${2:-80}"
  RETVAL=$?
  if [ $RETVAL != 0 ]; then
    STATUS=" not"
  fi
  echo "could$STATUS connect to port ${2:-80} on host '$1'"
  return $RETVAL
}

# Usage: vet_ssh SERVER [PORT|SERVICE]
# True when SERVER has PORT (default=22) both opened and serving SSH
vet_ssh() {
  probe $1 ${2:-22} && nmap -sV -p ${2:-22} $1 |grep -qiE 'open.....*ssh[^?]'
}

HELIX_IP_FILE=/tmp/helix-ip.txt
IP_RANGE=$1
shift

function set-difference ()
{
    comm -23 <(echo $1 | tr ' ' '\n' | sort -u) <(echo $2 | tr ' ' '\n' | sort -u)
}

function ssh-cb () { 
    if [[ "$1" == "-r" ]] || ! cbip=$(get-cb-ip); then
        if [[ -z "${cbip}" ]]; then
            unset cbip;
            echo "Scan failed";
            return false;
        fi;
        #ssh-keygen -R "${helixip}";
        #complete -d ssh;
        #complete -W helix@${helixip} ssh;
        #complete -d dbclient;
        #complete -W helix@${helixip} dbclient;
        ssh-copy-id helix@${cbip};
        #scp ${HOME}/dot/helix-vimrc helix@${helixip}:.vimrc;
    fi;
    ssh -y helix@${cbip}
}

function get-cb-ip () { 
    local result;
    local savedip=$(cat ${HELIX_IP_FILE} 2>/dev/null);
    if [[ -n "${savedip}" ]] && pingok "${savedip}"; then
        result=${savedip};
    else
        result=$(scan-ssh);
        if [[ -z "${result}" ]]; then
            return 1;
        fi;
        echo $result > ${HELIX_IP_FILE};
    fi;
    if ! test-ssh-connect helix@${result}; then
        return 1;
    fi;
    echo ${result};
    return 0
}

function scan-ssh () { 
    while true; do
        ret=$(scan-ssh-once);
        if [[ -n "${ret}" ]]; then
            echo "${ret}";
            return 0;
        fi;
        sleep 0.2;
    done
}

function scan-ssh-once () { 
    set-difference "$(scan-range ${IP_RANGE}/24 'scan report')" "$(hostname -I)"
}

function scan-range () { 
    local addr=$1;
    if [[ -n "$2" ]]; then
        local filter='grep "$2" | sed -e "s/.* //" -e "s/.*(//" -e "s/).*//"';
    else
        local filter=cat;
    fi;
    cmd="nmap --send-eth --min-rate 10000 -p22 -T5 ${addr} | ${filter}";
    eval ${cmd}
}

function test-ssh-connect () { 
    ( ssh -y -T $1 true ) > /dev/null 2>&1
}

ssh-cb
