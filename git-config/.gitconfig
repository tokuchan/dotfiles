[user]
	name = Sean R. Spillane
	email = sean@spillane.us
	signingkey = /home/seans/.ssh/id_ed25519.pub

[color]
	diff = auto
	status = auto
	branch = auto
	interactive = auto
	ui = true
	pager = true

[color "branch"]
	current = blue reverse
	local = blue
	remote = green

[color "diff"]
	meta = yellow bold
	frag = magenta bold
	old = red bold
	new = green bold

[color "status"]
	added = green
	changed = magenta
	untracked = cyan

[core]
	pager = less -FRSX
	whitespace = fix,-indent-with-non-tab,trailing-space,cr-at-eol
	autocrlf = input
	quotepath = false
	editor = nvim -O

[alias]
	aliases = !$HOME/.local/bin/aliases.py
	attach = "!f () { git branch --force $1 && git checkout $1; }; f"
	branches = branch -a
	changes = "log-pretty --no-merges --max-count=15 --graph"
	detach = "checkout --detach"
	patches = "changes patches...master"
	last = "log-pretty --max-count=1"
	log-pretty = "!f () { git log --pretty='format:%(trailers:key=Change-Id,valueonly,separator=%x2C) %C(dim green) %<(12,trunc)%ar %C(bold magenta)%h%Creset %C(green)%<(24,trunc)%an %C(italic #ff8800)%s' $@; }; f"
	ready = diff --cached
	remotes = remote -v
	sweep = clean -fdi
	tags = tag

	do = "!f () { cd $(git rev-parse --show-toplevel); $*; }; f"
	fix = "!f() { $EDITOR $(git diff --name-only); }; f"
	save = "!f () { cd -- ${GIT_PREFIX:-.}; git stash push -m\"$(git state)\" $@; }; f"
	tree = log --all --graph --decorate --oneline --simplify-by-decoration
	unstage = reset HEAD --

	a = add
	br = branch
	c = commit
	co = checkout
	cp = cherry-pick
	df = diff
	fo = fetch origin
	lg = log
	pos = push --set-upstream origin
	p = pull
	pp = push
	rs = restore --staged
	st = status
	tg = tag
	regen-aliases = "!for a in $($HOME/dev/config/aliases.py -f simple -D); do fish -c alias g$a='g $a'; done"
	gpush = push gerrit patches:refs/for/master
	log-exclude = "!f() { br=$(git branch --show-current); git log \"${br}\" --not $(git for-each-ref --format='%(refname)' refs/heads/ | grep -v \"refs/heads/${br}\") $*; }; f"
	current-branch = "!f() { test -z \"${1}\" && git rev-parse --abbrev-ref HEAD || echo $1; }; f"
	log-br = "!f() { git log --oneline $(git current-branch $1)...local-master; }; f"
	pull-rebase = "!f(){ git switch master && git pull --no-edit && git submodule update --init && git switch patches && git rebase; git status; }; f"
	pull-master = "!f(){ b=$(git current-branch); git switch master && git pull --no-edit && git submodule update --init && git switch \"${b}\"; }; f"
	pull-local-master = "!f(){ b=$(git current-branch); git switch local-master && git pull-master && git pull --no-edit && git submodule update --init && git switch \"${b}\"; }; f"
	rebase-patches = "!f(){ b=$(git current-branch); git switch patches && git rebase && git switch \"${b}\"; }; f"
	send = "!f() { br=$(git current-branch); pt=\"${*:-$(git log --oneline --no-abbrev-commit | head -1 | cut -d' ' -f1)}\"; test \"${br}\" != patches && git switch patches && (git cherry-pick \"${pt}\" || git cherry-pick --abort) && git switch \"${br}\"; git log --oneline patches...master; }; f"
	pwd = "!f () { cd -- ${GIT_PREFIX:-.}; pwd | sed -e \"s|\"$(git do pwd)/\"||\"; }; f"
	state = "!f () { cd -- ${GIT_PREFIX:-.}; echo \"{\\\"branch\\\":\\\"$(git rev-parse --abbrev-ref HEAD)\\\",\\\"cwd\\\":\\\"$(git pwd)\\\",\\\"commit\\\":\\\"$(git log --pretty=format:\"%H\\\",\\\"log\\\":\\\"%s\"|head -1)\\\"}\" | jq $*; }; f"
	stl = "!f () { cd -- ${GIT_PREFIX:-.}; git stash list | grep \": {\" | cut -d':' -f1,3- | sed 's/^/{\"ref\":\"/;s/: {/\",/' | jq -s . | jq $*; }; f"
	str = "!f () { cd -- ${GIT_PREFIX:-.}; git stl | jq \".[] | select(.branch==$(git state .branch)) | select(.cwd==$(git state .cwd))\" | jq $*; }; f"
	f = fuzzy-fetch
	g = "!f() { git branchless switch --interactive $@ || git-goto $@; }; f"
	freshen = "!f() { set -x; git clean -xfd && git submodule foreach --recursive git clean -xfd && git reset --hard && git submodule foreach --recursive git reset --hard && git submodule update --init --recursive; set +x; }; f"
	md = "log --no-merges master..HEAD --format=\"## %s%n%n%b%n\""

[pull]
	rebase = false

[diff]
	tool = vimdiff
[difftool]
	prompt = false
[difftool "nvimdiff"]
	cmd = "nvim -d \"$LOCAL\" \"$REMOTE\""
[merge]
	tool = vimdiff
[mergetool]
	prompt = true
[mergetool "nvimdiff"]
	#cmd = "nvim -d \"$LOCAL\" \"$REMOTE\" \"$BASE\" \"$MERGED\""
	layout = "LOCAL,BASE,REMOTE / MERGED + BASE,LOCAL + BASE,REMOTE + (LOCAL/BASE/REMOTE),MERGED"
[mergetool "vimdiff"]
	layout = "LOCAL,BASE,REMOTE / MERGED + BASE,LOCAL + BASE,REMOTE + (LOCAL/BASE/REMOTE),MERGED"
[init]
	defaultBranch = master
[rerere]
	enabled = false
[status]
	submodulesummary = true
[guitool "Stage by edit in term"]
	cmd = xterm -fa 'fixed' -fs 14 -e git stage -e $FILENAME

[diff]
	ignoreSubmodules = dirty
[advice]
	skippedCherryPicks = false

[difftool "branchless"]
	cmd = git-branchless difftool --read-only --dir-diff $LOCAL $REMOTE

[mergetool "branchless"]
	cmd = git-branchless difftool $LOCAL $REMOTE --base $BASE --output $MERGED
[submodule]
	recurse = true
[credential]
	helper = /mnt/c/Program\\ Files/Git/mingw64/bin/git-credential-manager.exe
[commit]
	gpgsign = true
[gpg]
	format = ssh
[url "ssh://git@github.com"]
	insteadOf = https://github.com
