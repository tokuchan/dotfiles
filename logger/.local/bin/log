#!/bin/bash
# Given a command line, run that command in the background, logging the error
# and output to files, timing the run, then notifying the user and playing a
# sound at the end.

trap tabs EXIT

set -o pipefail

command=$* # Get the command to run
#spinner='\|/-' # Set up a spinner
spinner='⡏⠟⠻⢹⣸⣴⣦⣇'
spinner_length=${#spinner}
alert_sound="${HOME}/.local/share/logger/JR Osaka Loop 1.mp3"
fail_sound="${HOME}/.local/share/logger/fail-jingle-stereo-mix-88784.mp3"
log_directory="log-$1-$$"
log_stdout="${log_directory}/stdout"
log_stderr="${log_directory}/stderr"
log_combined="${log_directory}/combined"
log_summary="${log_directory}/summary.tsv"

pid_color="\033[38;2;255;0;255m\033[4m\033[1m"

function logit () {
	category=$1
	shift
  env printf "=$$=\t%s\t%s\t%s\n" "$(date +'%Y.%M.%DT%H.%M.%S.%N')" "$category" "$*" >> ${log_summary}
}

function loginfo () {
  logit "information" "$*"
}

function logwarn () {
  logit "warning" "$*"
}

function logerror () {
  logit "error" "$*"
}

function logfatal () {
  logit "fatal" "$*"
  cat ${log_summary}
  exit 1
}

mkdir -p ${log_directory}

loginfo "Create log directory"
#loginfo "spinner: .......... '${spinner}'"
#loginfo "spinner-length: ... ${spinner_length}"
loginfo "Log directory: .... ${log_directory}"
loginfo "Stdout: ........... ${log_stdout}"
loginfo "Stderr: ........... ${log_stderr}"
loginfo "Combined: ......... ${log_combined}"
loginfo "Command: .......... $command"

loginfo "Run command"

env printf "$pid_color=$$=\033[0m\tLog file in ${log_combined} (and clipboard)\n"
env printf "${log_combined}" | xclip -selection clipboard 2>&1 > /dev/null

(${command} | as-logfmt --context="${command}" --detect-duplicate-lines=5 ) > >(tee -a ${log_stdout} >> ${log_combined}) 2> >(tee -a ${log_stderr} >> ${log_combined}) & pid=$!

i=1
env printf "\033[?25l${spinner:0:1}"
while ps -p $pid > /dev/null
do
  env printf "\b%s" "${spinner:i++%${spinner_length}:1}"
  sleep 0.1
done
env printf "\b\033[?25h\n"

if wait $pid; then
  paplay "${alert_sound}"
  notify-send "Command '${command}' is complete!"
  loginfo "Command completed successfully."
else
  paplay "${fail_sound}"
  notify-send "Command '${command}' failed!"
  logerror "Command failed!"
fi

printf "\n$pid_color=$$=\033[0m\tDisplay summary\n\n"
printf "\033[A\033[3g%11s\033H%37s\033H%12s\033H\r$pid_color=$$=\tTimestamp\tCategory\tMessage\033[0m\n" " " " " " "
cat ${log_summary} | awk -F'\t' '{a=$1; $1=""; printf "'"$pid_color"'%s\033[0m\t%s\n", a, $0}'
tabs

printf "\n$pid_color=$$=\033[0m\tDisplay values\n\n"
log2tsv ${log_combined}

printf "\n$pid_color=$$=\033[0m\tDisplay end of log\n\n"
tail ${log_combined} | sed "s,^,=$$=\t," | awk -F'\t' '{a=$1; $1=""; printf "'"$pid_color"'%s\033[0m\t%s\n", a, $0}'
